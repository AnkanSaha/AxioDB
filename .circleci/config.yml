version: 2.1

jobs:
  # Jobs for AxioDB package testing and publishing to NPM Package Registry
  Test:
    docker:
      - image: node:latest
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: npm ci
      - run:
          name: Run Tests
          command: echo "Tests Passed"

  Publish_To_NPM:
    docker:
      - image: node:latest
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Check if package.json changed
          command: |
            CHANGED=$(git diff --name-only origin/main... | grep "^package.json" || true)
            if [ -z "$CHANGED" ]; then
              echo "No changes in package.json, skipping Publish_To_NPM."
              circleci-agent step halt
            fi
      - run:
          name: Install Dependencies
          command: npm ci
      - run:
          name: Build Package
          command: npm run build
      - run:
          name: Set NPM Auth Token
          command: echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc
      - run:
          name: Publish to NPM Registry
          command: npm publish --access public

  # Jobs for AxioDB package publishing to GitHub Package Registry
  Publish_To_Github:
    docker:
      - image: node:latest
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Check if package.json changed
          command: |
            CHANGED=$(git diff --name-only origin/main... | grep "^package.json" || true)
            if [ -z "$CHANGED" ]; then
              echo "No changes in package.json, skipping Publish_To_Github."
              circleci-agent step halt
            fi
      - run:
          name: Install Dependencies
          command: npm install
      - run:
          name: Build Package
          command: npm run build
      - run:
          name: Set Github Auth Token
          command: |
            echo "//npm.pkg.github.com/:_authToken=${GITHUB_AUTH_TOKEN}" >> ~/.npmrc
      - run:
          name: Change the Package name in Package.json
          command: |
            apt-get update && apt-get install -y sed
            sed -i "2s/\"axiodb\"/\"@${GITHUB_USER_NAME}\/axiodb\"/" package.json
      - run:
          name: Publish to Github Package Registry
          command: npm publish --registry=https://npm.pkg.github.com --scope=@${GITHUB_USER_NAME} --access public

  # Jobs for Docker image build and push to Docker Hub
  push_To_DockerHub:
    docker:
      - image: cimg/base:stable # CircleCI's base image with Docker support
    steps:
      - checkout
      - run:
          name: Check if Docker directory changed
          command: |
            CHANGED=$(git diff --name-only origin/main... | grep "^source/Docker/" || true)
            if [ -z "$CHANGED" ]; then
              echo "No changes in Docker directory, skipping push_To_DockerHub."
              circleci-agent step halt
            fi

      - setup_remote_docker # Use default Docker version (currently Docker 24.0.6)

      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_API_KEY" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - run:
          name: Build Docker image with version and latest tags
          command: |
            cd ./source/Docker && ls && docker build -t $DOCKER_REGISTRY/$DOCKERHUB_USERNAME/$DOCKER_IMAGE:$DOCKER_VERSION_TAG .
            docker tag $DOCKER_REGISTRY/$DOCKERHUB_USERNAME/$DOCKER_IMAGE:$DOCKER_VERSION_TAG \
                       $DOCKER_REGISTRY/$DOCKERHUB_USERNAME/$DOCKER_IMAGE:latest

      - run:
          name: Push Docker images (version & latest)
          command: |
            docker push $DOCKER_REGISTRY/$DOCKERHUB_USERNAME/$DOCKER_IMAGE:$DOCKER_VERSION_TAG
            docker push $DOCKER_REGISTRY/$DOCKERHUB_USERNAME/$DOCKER_IMAGE:latest

  # Job to push Docker image to GitHub Container Registry
  push_To_Github:
    docker:
      - image: cimg/base:stable # CircleCI's base image with Docker support
    steps:
      - checkout
      - run:
          name: Check if Docker directory changed
          command: |
            CHANGED=$(git diff --name-only origin/main... | grep "^source/Docker/" || true)
            if [ -z "$CHANGED" ]; then
              echo "No changes in Docker directory, skipping push_To_Github."
             circleci-agent step halt
            fi

      - setup_remote_docker # Use default Docker version (currently Docker 24.0.6)

      - run:
          name: Login to GitHub Container Registry
          command: |
            echo "$GITHUB_TOKEN" | docker login $GITHUB_REGISTRY -u $GITHUB_USERNAME --password-stdin

      - run:
          name: Build Docker image with version and latest tags
          command: |
            cd ./source/Docker && ls && docker build -t $GITHUB_REGISTRY/$GITHUB_USERNAME/$DOCKER_IMAGE:$DOCKER_VERSION_TAG .
            docker tag $GITHUB_REGISTRY/$GITHUB_USERNAME/$DOCKER_IMAGE:$DOCKER_VERSION_TAG \
            $GITHUB_REGISTRY/$GITHUB_USERNAME/$DOCKER_IMAGE:latest

      - run:
          name: Push Docker images (version & latest)
          command: |
            docker push $GITHUB_REGISTRY/$GITHUB_USERNAME/$DOCKER_IMAGE:$DOCKER_VERSION_TAG
            docker push $GITHUB_REGISTRY/$GITHUB_USERNAME/$DOCKER_IMAGE:latest

  # Job to send built client files to a remote server and deploy them
  Send_To_Server:
    docker:
      - image: node:latest
    steps:
      - checkout
      - run:
          name: Check if Document directory changed
          command: |
            CHANGED=$(git diff --name-only origin/main... | grep "^Document/" || true)
            if [ -z "$CHANGED" ]; then
              echo "No changes in Document directory, skipping Send_To_Server."
              circleci-agent step halt
            fi
      - add_ssh_keys:
          fingerprints:
            - ${SSH_FINGERPRINT}
      - run:
          name: Install client Dependencies
          command: |
            cd ./Document && npm install --force
      - run:
          name: Build client Project
          command: |
            cd ./Document && npm run build
      - run:
          name: Check if client Build Folder Already Exists in server
          command: |
            cd ./Document && ssh -o StrictHostKeyChecking=no ${SSH_USER}@${VM_IP} "sudo rm -rf ${PROJECT_NAME}"
      - run:
          name: Send client Files to server
          command: |
            cd ./Document && scp -o StrictHostKeyChecking=no -r ${PROJECT_NAME}/ ${SSH_USER}@${VM_IP}:/home/${SSH_USER}/
      - run:
          name: Check if Already Exists in Nginx Static Folder
          command: |
            ssh -o StrictHostKeyChecking=no ${SSH_USER}@${VM_IP} "sudo rm -rf /var/www/html/${PROJECT_NAME}"
      - run:
          name: Move Files to Nginx Static Folder
          command: |
            ssh -o StrictHostKeyChecking=no ${SSH_USER}@${VM_IP} "sudo mv /home/${SSH_USER}/${PROJECT_NAME} /var/www/html/"
      - run:
          name: Restart Nginx
          command: |
            ssh -o StrictHostKeyChecking=no ${SSH_USER}@${VM_IP} "sudo systemctl restart nginx"

workflows:
  version: 2
  Pipeline:
    jobs:
      - Test:
          filters:
            branches:
              only: main
      - Publish_To_NPM:
          requires:
            - Test
          filters:
            branches:
              only: main
      - Publish_To_Github:
          requires:
            - Test
          filters:
            branches:
              only: main
      - push_To_DockerHub:
          requires:
            - Test
          filters:
            branches:
              only: main
      - push_To_Github:
          requires:
            - Test
          filters:
            branches:
              only: main
      - Send_To_Server:
          requires:
            - Test
          filters:
            branches:
              only: main
